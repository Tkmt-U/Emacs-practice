http://www.haun.org/kent/lisp1/
https://qiita.com/eggc/items/8722d8883ebf1d9446da
http://www.math.s.chiba-u.ac.jp/%7Ematsu/lisp/emacs-lisp-intro-jp.html#SEC_Top

基本
全体を括弧で囲む
区切りは空白
	例
	(+ 1 2)
		 -->3
		 1 + 2
	(* (- 11 1) (/ 5 1))
		 -->50
		 (11 - 1) * (5 / 1)

変数
(setq x 1)
			-->1
			(変数xに1が入る)

if
Emacsでは、「偽」以外の値はすべて「真」
偽 = nil
(if 条件 真の場合の返り値 偽の場合の返り値)
	 例
	 (if x 1 2)
	 		 -->1
	 (if nil 1 2)
	 		 -->2

progn
引数を左から順に評価する(だけ)
	例
	(if hoge (progn (setq x 1) (setq y 2))
					 (progn (setq x 0) (setq y 0)))
					 -->もしhogeがnilでないなら、xに1、yに2を代入、nilならxに0、yに0を代入する
cond
要はif-elsif-end
	例
	(cond (hoge (setq x 1) (setq y 2))
				(t (setq x 0) (setq y 0)))
				-->もしhogeが真なら、xに1、yに2を代入、tが真ならxに0、yに0を代入する
				(tは「常に真」を表す)
				
	(cond (t (setq x 1))
				(t (setq x 0)))
				-->1
				(最初の条件が真のため、そこで処理が終わる)

let
ローカル変数の定義
	例
	(setq x 1)
	x
		-->1
	(let ((x 0) y)
			 (setq y 10)
		 	 x)
				-->0
	x
		-->1

	(let* ((x 2) (y x))
				y)
				-->2
				(xに2を代入、xをyに代入)
let*は、直前で定義したローカル変数を使うことができる

関数
defunで定義
	例
	(defun abs (x)
				 (cond ((>= x 0) x)
				 			 (t (- 0 x))))
							 -->引数xの絶対値を求める関数absを定義
	(abs 4)
	-->4
	(abs -2)
	-->2

ドット対
(x . y)
	 リスト(アトムではない)
(cons 1 2)
			-->(1 . 2) 左:car部 右:cdr部

quote